// Generated by CoffeeScript 1.10.0
this.BlogMap = (function() {
  var throttle;

  function BlogMap() {}

  BlogMap.prototype.start = function() {
    return $.ajax({
      url: "/payload.json",
      success: (function(_this) {
        return function(data) {
          _this.data = data;
          _this.initializeLayout();
          return _this.startMap();
        };
      })(this)
    });
  };

  BlogMap.prototype.initializeLayout = function() {
    var clientHeight, containerWidth, mapHeight, topPosition;
    clientHeight = document.body.clientHeight;
    containerWidth = $(".container").width();
    topPosition = $("#map-container").position().top;
    mapHeight = clientHeight - topPosition - 200;
    if (mapHeight < 300) {
      mapHeight = 300;
    }
    $('.intro-header').height(clientHeight);
    $("#map-container").width(containerWidth);
    $("#content").height(mapHeight);
    return $("#content").width(containerWidth);
  };

  BlogMap.prototype.startMap = function() {
    var c, circleLayer, coords, ct, displayFeatureInfo, feature, i, interaction, j, k, lastPopupTime, len, len1, len2, lineLayerBus, lineLayerCanoe, lineLayerCar, lineLayerCycle, lineLayerHike, lineLayerRegular, lineLayerTrain, map, opacityLesser, popup, poputThreshold, post, ref, ref1, ref2, route, showPopup, sourceCircles, sourceLinesBus, sourceLinesCanoe, sourceLinesCar, sourceLinesCycle, sourceLinesHike, sourceLinesRegular, sourceLinesTrain, strokeWidth, strokeWidthLesser, styleCircle, styleLineBus, styleLineCanoe, styleLineCar, styleLineCycle, styleLineHike, styleLineRegular, styleLineTrain;
    strokeWidth = 3;
    strokeWidthLesser = 3;
    opacityLesser = 0.4;
    styleLineCar = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: [0, 0, 80, opacityLesser],
        width: strokeWidthLesser
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleLineBus = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: [0, 80, 80, opacityLesser],
        width: strokeWidthLesser
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleLineTrain = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: [80, 80, 0, opacityLesser],
        width: strokeWidthLesser
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleLineRegular = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "#444444",
        width: strokeWidthLesser
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleLineHike = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "#ff9900",
        width: strokeWidth
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleLineCycle = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "#0055FF",
        width: strokeWidth
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleLineCanoe = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "#000099",
        width: strokeWidth
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    styleCircle = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: "#FF0000",
        width: strokeWidth
      }),
      fill: new ol.style.Fill({
        color: "rgba(255, 0, 0, 0.2)"
      })
    });
    sourceCircles = new ol.source.Vector();
    sourceLinesCanoe = new ol.source.Vector();
    sourceLinesCycle = new ol.source.Vector();
    sourceLinesHike = new ol.source.Vector();
    sourceLinesTrain = new ol.source.Vector();
    sourceLinesBus = new ol.source.Vector();
    sourceLinesCar = new ol.source.Vector();
    sourceLinesRegular = new ol.source.Vector();
    ref = this.data["posts"];
    for (i = 0, len = ref.length; i < len; i++) {
      post = ref[i];
      if (false) {
        sourceCircles.addFeature(new ol.Feature(new ol.geom.Circle(ol.proj.transform([post["coords-circle"][1], post["coords-circle"][0]], 'EPSG:4326', 'EPSG:3857'), parseFloat(post["range"]) * 1000.0)));
      }
      if (false) {
        coords = [ol.proj.transform([post["coords-from"][1], post["coords-from"][0]], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([post["coords-to"][1], post["coords-to"][0]], 'EPSG:4326', 'EPSG:3857')];
        sourceLines.addFeature(new ol.Feature(new ol.geom.LineString(coords)));
      }
      if (post["coords"]) {
        ref1 = post["coords"];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          route = ref1[j];
          if (route["route"]) {
            coords = [];
            ref2 = route["route"];
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              c = ref2[k];
              ct = ol.proj.transform([c[1], c[0]], 'EPSG:4326', 'EPSG:3857');
              coords.push(ct);
            }
            feature = new ol.Feature(new ol.geom.LineString(coords));
            feature.set("post-date", post["date"]);
            feature.set("post-url", post["url"]);
            feature.set("post-title", post["title"]);
            feature.set("post-slug", post["slug"]);
            if (route["type"] === "hike") {
              sourceLinesHike.addFeature(feature);
            } else if (route["type"] === "bicycle") {
              sourceLinesCycle.addFeature(feature);
            } else if (route["type"] === "canoe") {
              sourceLinesCanoe.addFeature(feature);
            } else if (route["type"] === "car") {
              sourceLinesCar.addFeature(feature);
            } else if (route["type"] === "bus") {
              sourceLinesBus.addFeature(feature);
            } else if (route["type"] === "train") {
              sourceLinesTrain.addFeature(feature);
            } else {
              sourceLinesRegular.addFeature(feature);
            }
          }
        }
      }
    }
    circleLayer = new ol.layer.Vector({
      source: sourceCircles,
      style: styleCircle
    });
    lineLayerCanoe = new ol.layer.Vector({
      source: sourceLinesCanoe,
      style: styleLineCanoe
    });
    lineLayerCycle = new ol.layer.Vector({
      source: sourceLinesCycle,
      style: styleLineCycle
    });
    lineLayerHike = new ol.layer.Vector({
      source: sourceLinesHike,
      style: styleLineHike
    });
    lineLayerCar = new ol.layer.Vector({
      source: sourceLinesCar,
      style: styleLineCar
    });
    lineLayerBus = new ol.layer.Vector({
      source: sourceLinesBus,
      style: styleLineBus
    });
    lineLayerTrain = new ol.layer.Vector({
      source: sourceLinesTrain,
      style: styleLineTrain
    });
    lineLayerRegular = new ol.layer.Vector({
      source: sourceLinesRegular,
      style: styleLineRegular
    });
    map = new ol.Map({
      controls: [new ol.control.Zoom(), new ol.control.ZoomSlider()],
      pixelRatio: 1.0,
      target: "content",
      projection: "EPSG:4326",
      layers: [
        new ol.layer.Tile({
          source: new ol.source.OSM()
        }), circleLayer, lineLayerRegular, lineLayerCar, lineLayerBus, lineLayerTrain, lineLayerHike, lineLayerCycle, lineLayerCanoe
      ],
      view: new ol.View({
        center: ol.proj.transform([19.4553, 51.7768], 'EPSG:4326', 'EPSG:3857'),
        zoom: 6
      })
    });
    interaction = new ol.interaction.Select();
    interaction.getFeatures().on("add", (function(_this) {
      return function(e) {
        var img, l, last_p, len3, new_image, p, ref3, results;
        p = e.element.U;
        last_p = p;
        ref3 = _this.data["posts"];
        results = [];
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          post = ref3[l];
          if (post.url === last_p["post-url"]) {
            new_image = post["header-ext-img"];
            if (new_image) {
              img = new Image();
              img.onload = function() {
                $('#background2').css('background-image', $('#background1').css('background-image'));
                $('#background2').show();
                $('#background1').css('background-image', "url(" + new_image + ")");
                return $("#background2").fadeOut(1500, function() {});
              };
            }
            results.push(img.src = new_image);
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
    })(this));
    map.addInteraction(interaction);
    popup = new ol.Overlay.Popup;
    map.addOverlay(popup);
    lastPopupTime = +(new Date);
    poputThreshold = 500;
    map.on("pointermove", throttle((function(_this) {
      return function(evt) {
        if (evt.dragging) {
          return true;
        }
        return displayFeatureInfo(evt);
      };
    })(this)), 60);
    map.on("click", function(evt) {
      return displayFeatureInfo(evt);
    });
    displayFeatureInfo = (function(_this) {
      return function(evt) {
        var now, pixel;
        pixel = map.getEventPixel(evt.originalEvent);
        feature = map.forEachFeatureAtPixel(pixel, function(feature) {
          return feature;
        });
        if (feature) {
          now = +(new Date);
          console.log(now, lastPopupTime, now - lastPopupTime);
          if (lastPopupTime < now - poputThreshold) {
            lastPopupTime = now;
            return showPopup(evt, feature.U);
          }
        } else {
          return null;
        }
      };
    })(this);
    return showPopup = (function(_this) {
      return function(evt, p) {
        var bgImgName, div;
        bgImgName = p["post-date"] + "_" + p["post-slug"];
        div = '<div class="map-image" style="background-image: url(\'/img/posts/' + bgImgName + '.jpg\')">';
        div += '<div class="map-image-date">' + p["post-date"] + '</div>';
        div += '<div class="map-image-title"><a href="' + p["post-url"] + '">' + p["post-title"] + '</a></div>';
        div += '</div>';
        return popup.show(evt.coordinate, div);
      };
    })(this);
  };

  throttle = function(fn, threshhold, scope) {
    var deferTimer, last;
    threshhold || (threshhold = 250);
    last = void 0;
    deferTimer = void 0;
    return function() {
      var args, context, now;
      context = scope || this;
      now = +(new Date);
      args = arguments;
      if (last && now < last + threshhold) {
        clearTimeout(deferTimer);
        return deferTimer = setTimeout(function() {
          last = now;
          return fn.apply(context, args);
        }, threshhold);
      } else {
        last = now;
        return fn.apply(context, args);
      }
    };
  };

  return BlogMap;

})();
